generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    uuid          String         @id @default(uuid())
    email         String         @unique
    userpss       String
    name          String
    surname       String
    birthdate     DateTime
    zipcode       String
    createdat     DateTime       @default(now())
    refreshTokens RefreshToken[]
    reqHistories  ReqHistory[]
    userTags      UserTag[]

    @@map("users")
}

model RefreshToken {
    uuid      String   @id @default(uuid())
    useruuid  String
    token     String   @unique
    expiresat DateTime
    createdat DateTime @default(now())
    isrevoked Boolean  @default(false)

    user User @relation(fields: [useruuid], references: [uuid], onDelete: Cascade)

    @@map("refreshtoken")
}

model Tag {
    tagid    Int       @id @default(autoincrement())
    tagname  String?   @db.VarChar(100)
    tagtype  String?   @db.VarChar(100)
    userTags UserTag[]
    reqTags  ReqTag[]

    @@map("tags")
}

model UserTag {
    useruuid String @db.VarChar(50)
    tagid    Int

    user User @relation(fields: [useruuid], references: [uuid], onDelete: Cascade)
    tag  Tag  @relation(fields: [tagid], references: [tagid], onDelete: Cascade)

    @@id([useruuid, tagid])
    @@map("users_tags")
}

model ReqHistory {
    reqid       Int      @id @default(autoincrement())
    useruuid    String
    inputparams String
    outparams   String
    createdat   DateTime @default(now())
    rating      Int?
    reqTags     ReqTag[]

    user User @relation(fields: [useruuid], references: [uuid], onDelete: Cascade)

    @@map("reqhistory")
}

model ReqTag {
    reqid Int
    tagid Int

    reqHistory ReqHistory @relation(fields: [reqid], references: [reqid], onDelete: Cascade)
    tag        Tag        @relation(fields: [tagid], references: [tagid], onDelete: Cascade)

    @@id([reqid, tagid])
    @@map("req_tags")
}
